import Logger from '../../utils/logger';
// frontend/src/components/counselling/UnifiedCorrectiveCounselling.tsx
// üéØ UNIFIED CORRECTIVE COUNSELLING - Converted to use UnifiedModal system
// ‚úÖ Maintains all existing functionality: 4-step workflow, signatures, validation
// üé® Integrates with design system: CSS variables, modal-system.css, organization branding
// üì± Mobile-optimized with consistent UX patterns

import React, { useState, useEffect, useRef } from 'react';
import {
  BookOpen, Calendar, FileText, CheckCircle, AlertCircle,
  Clock, ArrowLeft, UserCheck, UserX, Send, X, RotateCcw, Plus, Minus, Mic, User
} from 'lucide-react';

// Removed UnifiedModal - using direct modal-system pattern like Enhanced Warning Wizard
import { UniversalEmployeeSelector } from '../common/UniversalEmployeeSelector';

import { useAuth } from '../../auth/AuthContext';
import { useOrganization } from '../../contexts/OrganizationContext';
import { FirebaseService } from '../../services/FirebaseService';
import { DatabaseShardingService } from '../../services/DatabaseShardingService';
import { DataServiceV2 } from '../../services/DataServiceV2';
import { CounsellingService } from '../../services/CounsellingService';
import { API } from '../../api';
import type { Employee, WarningCategory } from '../../types/core';
import type {
  CorrectiveCounselling,
  CounsellingFormData,
  PromiseToPerform,
  CounsellingType
} from '../../types/counselling';
import { COUNSELLING_TYPES } from '../../types/counselling';

// üè¢ SHARDED COLLECTIONS - Counselling stored at /organizations/{orgId}/reports/{reportId}

// üñäÔ∏è THEMED SIGNATURE CANVAS COMPONENT
interface SignatureCanvasProps {
  onSignatureChange: (signature: string) => void;
  label: string;
  required?: boolean;
}

const ThemedSignatureCanvas: React.FC<SignatureCanvasProps> = ({
  onSignatureChange,
  label,
  required = false
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [hasSignature, setHasSignature] = useState(false);

  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    setIsDrawing(true);
    ctx.beginPath();
    ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);
  };

  const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isDrawing) return;

    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);
    ctx.stroke();
    setHasSignature(true);
  };

  const stopDrawing = () => {
    if (isDrawing && canvasRef.current) {
      setIsDrawing(false);
      const dataURL = canvasRef.current.toDataURL();
      onSignatureChange(dataURL);
    }
  };

  const clearSignature = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    setHasSignature(false);
    onSignatureChange('');
  };

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Set up canvas
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
    ctx.strokeStyle = 'var(--color-text)';
    ctx.lineWidth = 2;
    ctx.lineCap = 'round';
  }, []);

  return (
    <div className="space-y-3">
      <label className="block text-sm font-medium" >
        {label} {required && <span className="unified-field-required">*</span>}
      </label>

      <div className="p-3 rounded" style={{ backgroundColor: 'var(--color-card-background)', border: '1px solid var(--color-border)' }}>
        <canvas
          ref={canvasRef}
          className="w-full h-32 border border-dashed rounded cursor-crosshair"
          onMouseDown={startDrawing}
          onMouseMove={draw}
          onMouseUp={stopDrawing}
          onMouseLeave={stopDrawing}
        />

        <div className="mt-3 flex justify-between items-center">
          <p className="text-sm text-gray-600">
            {hasSignature ? 'Signature captured' : 'Click and drag to sign above'}
          </p>
          <button
            onClick={clearSignature}
            disabled={!hasSignature}
            className="px-3 py-1 text-sm rounded flex items-center gap-1"
            style={{
              color: 'var(--color-text-secondary)',
              backgroundColor: 'var(--color-background)',
              border: '1px solid var(--color-border)'
            }}
          >
            <RotateCcw className="w-4 h-4" />
            Clear
          </button>
        </div>
      </div>
    </div>
  );
};

// üéØ THEMED PROMISE TO PERFORM ITEM
interface PromiseItemProps {
  promise: Omit<PromiseToPerform, 'id' | 'completed' | 'completedDate'>;
  index: number;
  onUpdate: (index: number, promise: Omit<PromiseToPerform, 'id' | 'completed' | 'completedDate'>) => void;
  onRemove: (index: number) => void;
}

const ThemedPromiseItem: React.FC<PromiseItemProps> = ({ promise, index, onUpdate, onRemove }) => {
  return (
    <div className="space-y-3 p-4 rounded" style={{ backgroundColor: 'var(--color-card-background)', border: '1px solid var(--color-border)' }}>
      <div className="flex justify-between items-start">
        <h4 className="font-medium" >
          Promise to Perform #{index + 1}
        </h4>
        <button
          onClick={() => onRemove(index)}
          className="p-1 rounded hover:bg-gray-100"
          style={{
            color: 'var(--color-text-secondary)',
            backgroundColor: 'transparent'
          }}
        >
          <Minus className="w-4 h-4" />
        </button>
      </div>

      <div className="space-y-3">
        <div>
          <label className="block text-sm font-medium mb-1 unified-field-required">
            Commitment Description
          </label>
          <textarea
            value={promise.description}
            onChange={(e) => onUpdate(index, { ...promise, description: e.target.value })}
            placeholder="e.g., 'I will arrive to work on time every day' or 'I will complete the customer service training course'"
            rows={3}
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1 unified-field-required">
            Target / Follow-up Date
          </label>
          <input
            type="date"
            value={promise.targetDate}
            onChange={(e) => onUpdate(index, { ...promise, targetDate: e.target.value })}
            className="w-full h-11 px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
            min={new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}
            max={new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}
            required
          />
          <p className="text-xs mt-1 text-gray-600">
            <strong>Dual purpose:</strong> Target completion date + Follow-up review date (3-90 days from today)
          </p>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1" >
            Success Criteria & Notes
          </label>
          <input
            type="text"
            value={promise.notes || ''}
            onChange={(e) => onUpdate(index, { ...promise, notes: e.target.value })}
            placeholder="How will success be measured? Any additional context or resources needed?"
            className="w-full h-11 px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
          />
        </div>
      </div>
    </div>
  );
};

interface UnifiedCorrectiveCounsellingProps {
  isOpen: boolean;
  onClose: () => void;
}

export const UnifiedCorrectiveCounselling: React.FC<UnifiedCorrectiveCounsellingProps> = ({
  isOpen,
  onClose
}) => {
  const { user } = useAuth();
  const { organization } = useOrganization();

  // üìù FORM STATE
  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<WarningCategory | null>(null);
  const [counsellingType, setCounsellingType] = useState<CounsellingType>('coaching');
  const [issueDescription, setIssueDescription] = useState('');
  const [interventionDetails, setInterventionDetails] = useState('');
  const [trainingProvided, setTrainingProvided] = useState('');
  const [resourcesProvided, setResourcesProvided] = useState<string[]>(['']);
  const [promisesToPerform, setPromisesToPerform] = useState<Omit<PromiseToPerform, 'id' | 'completed' | 'completedDate'>[]>([
    { description: '', targetDate: '', notes: '' }
  ]);
  const [employeeComments, setEmployeeComments] = useState('');
  const [managerSignature, setManagerSignature] = useState<string>('');
  const [employeeSignature, setEmployeeSignature] = useState<string>('');
  const [employeeConsent, setEmployeeConsent] = useState<boolean | null>(null);
  const [showEmployeeSignature, setShowEmployeeSignature] = useState(false);

  // üéØ UI STATE
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [step, setStep] = useState<'form' | 'manager-sign' | 'employee-decision' | 'complete'>('form');

  // üîÑ DATA STATE
  const [dataLoading, setDataLoading] = useState(true);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [categories, setCategories] = useState<WarningCategory[]>([]);
  const [activeCounselling, setActiveCounselling] = useState<CorrectiveCounselling[]>([]);

  // ‚úÖ Load filtered employees and warning categories
  useEffect(() => {
    if (organization?.id && user?.id && isOpen) {
      const loadData = async () => {
        Logger.debug('üìã Loading counselling data for manager:', user.id, 'Role:', user.role?.id, 'Org:', organization.id)

        try {
          setDataLoading(true);
          setError(null);

          // Load employees using same pattern as BookHRMeeting
          const employeesData = await API.employees.getByManager(user?.id || '', organization.id);
          Logger.success(9847)

          // Transform employees to the expected format
          const transformedEmployees = employeesData.map(emp => ({
            id: emp.id,
            firstName: emp.profile?.firstName || emp.firstName || 'Unknown',
            lastName: emp.profile?.lastName || emp.lastName || 'Employee',
            position: emp.profile?.position || emp.employment?.position || 'Unknown Position',
            department: emp.profile?.department || emp.employment?.department || 'Unknown',
            email: emp.profile?.email || emp.contact?.email || emp.email || '',
            phone: emp.profile?.phone || emp.contact?.phone || emp.phone || '',
            deliveryPreference: (emp.deliveryPreference || 'email') as 'email' | 'whatsapp' | 'print',
            ...emp
          }));

          setEmployees(transformedEmployees);

          // Load warning categories using the same method as HODDashboardSection
          let categoriesData = await API.organizations.getCategories(organization.id);

          // üî• FALLBACK: If no categories from service, use manufacturing defaults
          if (!categoriesData || categoriesData.length === 0) {
            Logger.debug('‚ö†Ô∏è No categories from service, using manufacturing defaults for counselling')
            categoriesData = [
              { id: 'attendance_punctuality', name: 'Attendance & Punctuality', severity: 'minor' },
              { id: 'performance_issues', name: 'Performance Issues', severity: 'moderate' },
              { id: 'safety_violations', name: 'Safety Violations', severity: 'serious' },
              { id: 'insubordination_disrespect', name: 'Insubordination & Disrespect', severity: 'serious' },
              { id: 'policy_violations', name: 'Policy Violations', severity: 'serious' },
              { id: 'dishonesty_theft', name: 'Dishonesty & Theft', severity: 'gross_misconduct' },
              { id: 'substance_abuse', name: 'Substance Abuse', severity: 'gross_misconduct' },
              { id: 'harassment_discrimination', name: 'Harassment & Discrimination', severity: 'gross_misconduct' }
            ];
          }

          setCategories(categoriesData);
          Logger.success(12168)

        } catch (err) {
          Logger.error('‚ùå Error loading counselling data:', err)
          setError('Failed to load data. Please try again.');
          setEmployees([]);
          setCategories([]);
        } finally {
          setDataLoading(false);
        }
      };

      loadData();
    } else if (!isOpen) {
      setDataLoading(false);
    }
  }, [user?.id, organization?.id, isOpen]);

  // üîç CHECK ACTIVE COUNSELLING FOR SELECTED EMPLOYEE
  const checkActiveCounselling = async (employee: Employee) => {
    if (!organization?.id) return;

    try {
      Logger.debug('üîç Checking active counselling for:', employee.firstName, employee.lastName)
      const activeSessions = await CounsellingService.getActiveCounsellingForEmployee(
        employee.id,
        organization.id
      );
      setActiveCounselling(activeSessions);
      Logger.success(13519)
    } catch (error) {
      Logger.error('‚ùå Error checking active counselling:', error)
      setActiveCounselling([]);
    }
  };

  // üéØ PROMISE TO PERFORM HANDLERS
  const addPromise = () => {
    if (promisesToPerform.length < 5) {
      setPromisesToPerform([...promisesToPerform, { description: '', targetDate: '', notes: '' }]);
    }
  };

  const updatePromise = (index: number, promise: Omit<PromiseToPerform, 'id' | 'completed' | 'completedDate'>) => {
    const updated = [...promisesToPerform];
    updated[index] = promise;
    setPromisesToPerform(updated);
  };

  const removePromise = (index: number) => {
    if (promisesToPerform.length > 1) {
      setPromisesToPerform(promisesToPerform.filter((_, i) => i !== index));
    }
  };

  // üìã RESOURCES HANDLERS
  const addResource = () => {
    setResourcesProvided([...resourcesProvided, '']);
  };

  const updateResource = (index: number, value: string) => {
    const updated = [...resourcesProvided];
    updated[index] = value;
    setResourcesProvided(updated);
  };

  const removeResource = (index: number) => {
    if (resourcesProvided.length > 1) {
      setResourcesProvided(resourcesProvided.filter((_, i) => i !== index));
    }
  };

  // ‚úÖ VALIDATE FORM
  const isFormValid = () => {
    return selectedEmployee &&
           selectedCategory &&
           issueDescription.trim().length >= 20 &&
           interventionDetails.trim().length >= 30 &&
           promisesToPerform.length > 0 &&
           promisesToPerform.every(p => p.description.trim() && p.targetDate);
  };

  // ‚úçÔ∏è HANDLE MANAGER SIGNATURE
  const handleManagerSignature = (signature: string) => {
    setManagerSignature(signature);
    if (signature) {
      setStep('employee-decision');
    }
  };

  // üë§ HANDLE EMPLOYEE DECISION
  const handleEmployeeDecision = (consent: boolean) => {
    setEmployeeConsent(consent);
    if (consent) {
      setShowEmployeeSignature(true);
    } else {
      // Employee declined - proceed without their signature
      submitCounsellingRecord();
    }
  };

  // ‚úçÔ∏è HANDLE EMPLOYEE SIGNATURE
  const handleEmployeeSignature = (signature: string) => {
    setEmployeeSignature(signature);
    if (signature) {
      submitCounsellingRecord();
    }
  };

  // üöÄ SUBMIT COUNSELLING RECORD
  const submitCounsellingRecord = async () => {
    if (!user || !selectedEmployee || !selectedCategory || !user.organizationId) return;

    try {
      setLoading(true);
      setError(null);

      // Generate promises with IDs
      const processedPromises: PromiseToPerform[] = promisesToPerform.map((p, index) => ({
        id: `${Date.now()}_${index}`,
        description: p.description.trim(),
        targetDate: p.targetDate,
        notes: p.notes?.trim() || '',
        completed: false
      }));

      // Filter out empty resources
      const filteredResources = resourcesProvided.filter(r => r.trim());

      const counsellingData: Omit<CorrectiveCounselling, 'id'> = {
        organizationId: user.organizationId,
        managerId: user.id,
        managerName: `${user.firstName} ${user.lastName}`,
        employeeId: selectedEmployee.id,
        employeeName: `${selectedEmployee.firstName} ${selectedEmployee.lastName}`,
        employeeNumber: selectedEmployee.employeeNumber || '',
        department: selectedEmployee.department || '',
        category: selectedCategory.name,
        categoryId: selectedCategory.id,
        counsellingType,
        issueDescription: issueDescription.trim(),
        interventionDetails: interventionDetails.trim(),
        trainingProvided: trainingProvided.trim(),
        resourcesProvided: filteredResources,
        promisesToPerform: processedPromises,
        improvementTimeline: '', // Legacy field - not used
        followUpDate: processedPromises.length > 0 ? processedPromises[0].targetDate : '',
        managerSignature: managerSignature || '',
        ...(employeeConsent && employeeSignature && { employeeSignature: employeeSignature }),
        employeeAcknowledged: employeeConsent || false,
        employeeComments: employeeComments.trim(),
        status: 'completed',
        improvementNoted: false,
        followUpCompleted: false,
        escalationRequired: false,
        dateCreated: new Date().toISOString(),
        lastUpdated: new Date().toISOString(),
        createdBy: user.id,
        documentVersion: 1
      };

      // Use sharded structure for counselling reports
      await DatabaseShardingService.createDocument(
        organization.id,
        'reports',
        counsellingData
      );

      setStep('complete');
      setSuccess(true);

      // Auto redirect after 5 seconds
      setTimeout(() => {
        onClose();
      }, 5000);

    } catch (err) {
      Logger.error('‚ùå Error submitting counselling record:', err)
      setError('Failed to submit counselling record. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Get step titles for progress indicator
  const stepTitles = [
    'Form & Details',
    'Manager Signature',
    'Employee Decision',
    'Complete'
  ];

  // Get current step number (1-based)
  const getCurrentStepNumber = () => {
    switch (step) {
      case 'form': return 1;
      case 'manager-sign': return 2;
      case 'employee-decision': return 3;
      case 'complete': return 4;
      default: return 1;
    }
  };

  // Handle back navigation
  const handleBack = () => {
    switch (step) {
      case 'manager-sign':
        setStep('form');
        break;
      case 'employee-decision':
        setStep('manager-sign');
        break;
      default:
        break;
    }
  };

  // Can show back button for steps after the first
  const showBackButton = step !== 'form' && step !== 'complete';

  if (!isOpen) return null;

  // üé® RENDER LOADING STATE
  if (dataLoading) {
    return (
      <div className="modal-system">
        <div className="modal-container">
          {/* Header */}
          <div className="modal-header">
            <div className="modal-header__left">
              <div>
                <h2 className="modal-header__title">
                  Loading Counselling Data
                </h2>
                <p className="modal-header__subtitle">
                  Preparing counselling session data
                </p>
              </div>
            </div>

            <button onClick={onClose} className="modal-header__close-button">
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="modal-content">
            <div className="modal-content__scrollable">
              <div className="space-y-4 text-center p-4 sm:p-6">
                <div className="animate-spin mx-auto h-16 w-16 border-4 border-gray-200 border-t-primary rounded-full"></div>
                <p className="mt-4 text-gray-600">
                  Loading counselling data...
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // üé® RENDER MAIN FORM
  if (step === 'form') {
    return (
      <div className="modal-system">
        <div className="modal-container modal-container--xl">
          {/* Header */}
          <div className="modal-header">
            <div className="modal-header__left">
              <div>
                <h2 className="modal-header__title">
                  Corrective Counselling Session
                </h2>
                <p className="modal-header__subtitle">
                  Document training, coaching, and discussions
                </p>
              </div>
            </div>

            <button onClick={onClose} className="modal-header__close-button">
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="modal-content">
            <div className="modal-content__scrollable">
              <div className="space-y-4">
                {error && (
            <div className="flex items-start gap-3 p-3 rounded" style={{ backgroundColor: 'var(--color-error-bg)', border: '1px solid var(--color-error)' }}>
              <AlertCircle className="w-5 h-5 shrink-0 mt-0.5" style={{ color: 'var(--color-error)' }} />
              <div className="flex-1">
                <span style={{ color: 'var(--color-text)' }}>{error}</span>
              </div>
            </div>
          )}

          {/* Active Counselling Warning */}
          {activeCounselling.length > 0 && selectedEmployee && (
            <div className="flex items-start gap-3 p-3 rounded" style={{ backgroundColor: 'var(--color-warning-bg)', border: '1px solid var(--color-warning)' }}>
              <AlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" style={{ color: 'var(--color-warning)' }} />
              <div className="flex-1">
                <h4 className="font-medium mb-2" style={{ color: 'var(--color-text)' }}>
                  ‚ö†Ô∏è Active Counselling Sessions Found
                </h4>
                <p className="text-sm mb-3" style={{ color: 'var(--color-text-secondary)' }}>
                  {selectedEmployee.firstName} {selectedEmployee.lastName} has {activeCounselling.length} active counselling session(s):
                </p>
                <div className="space-y-2">
                  {activeCounselling.map(session => (
                    <div key={session.id} className="p-2 rounded text-xs" style={{ backgroundColor: 'var(--color-card-background)', border: '1px solid var(--color-border)' }}>
                      <div className="flex justify-between items-start">
                        <div>
                          <span className="font-medium" style={{ color: 'var(--color-text)' }}>{session.category}</span>
                          <span className="ml-2 opacity-75" style={{ color: 'var(--color-text-secondary)' }}>({session.counsellingType})</span>
                        </div>
                        <span className="opacity-75" style={{ color: 'var(--color-text-secondary)' }}>
                          {new Date(session.dateCreated).toLocaleDateString()}
                        </span>
                      </div>
                      {session.followUpDate && (
                        <div className="mt-1 opacity-75" style={{ color: 'var(--color-text-secondary)' }}>
                          Follow-up due: {new Date(session.followUpDate).toLocaleDateString()}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                <p className="text-sm mt-3" style={{ color: 'var(--color-text-secondary)' }}>
                  <strong>You can still proceed</strong> with additional counselling, but consider if follow-up on existing sessions might be more appropriate.
                </p>
              </div>
            </div>
          )}

          {/* Employee Selection - Universal Selector */}
          <UniversalEmployeeSelector
            employees={employees}
            selectedEmployeeId={selectedEmployee?.id || null}
            onEmployeeSelect={(employeeId) => {
              const emp = employees.find(emp => emp.id === employeeId);
              setSelectedEmployee(emp || null);
              if (emp) {
                checkActiveCounselling(emp);
              } else {
                setActiveCounselling([]);
              }
            }}
            title="Employee Selection"
            subtitle="Choose the employee involved in this counselling session"
            disabled={dataLoading}
          />

          <div className="space-y-4">
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6">

            <div>
              <label className="block text-sm font-medium mb-2 unified-field-required">
                Related Category
              </label>
              <select
                value={selectedCategory?.id || ''}
                onChange={(e) => {
                  const cat = categories.find(cat => cat.id === e.target.value);
                  setSelectedCategory(cat || null);
                }}
                className="w-full h-11 px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
                required
              >
                <option value="">Choose a category...</option>
                {categories.map(cat => (
                  <option key={cat.id} value={cat.id}>
                    {cat.name} - {cat.severity}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Counselling Type */}
          <div>
            <div className="unified-section-header">
              <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                <BookOpen className="w-5 h-5" />
              </div>
              <div className="unified-section-header__content">
                <h3 className="unified-section-header__title">Counselling Type</h3>
                <p className="unified-section-header__subtitle">Select the appropriate type of counselling session</p>
              </div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
              {COUNSELLING_TYPES.map(type => (
                <div
                  key={type.id}
                  className={`category-card cursor-pointer ${
                    counsellingType === type.id ? 'category-card--selected' : ''
                  }`}
                  onClick={() => setCounsellingType(type.id)}
                >
                  <div className="category-card__content">
                    <span className="category-card__icon">{type.icon}</span>
                    <div className="category-card__details">
                      <div className="category-card__title">{type.label}</div>
                      <p className="category-card__description">{type.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Issue Description */}
          <div>
            <div className="unified-section-header">
              <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                <FileText className="w-5 h-5" />
              </div>
              <div className="unified-section-header__content">
                <h3 className="unified-section-header__title">Issue/Topic Description</h3>
                <p className="unified-section-header__subtitle">Describe the issue or topic that prompted this counselling session</p>
              </div>
            </div>
            <textarea
              value={issueDescription}
              onChange={(e) => setIssueDescription(e.target.value)}
              placeholder="Describe the issue, topic, or area for improvement that prompted this counselling session..."
                            rows={4}
              minLength={20}
              maxLength={500}
              required
            />
            <p className="text-xs mt-1 text-gray-600">
              {issueDescription.length}/500 characters (minimum 20)
            </p>
          </div>

          {/* Intervention Details */}
          <div>
            <div className="unified-section-header">
              <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                <CheckCircle className="w-5 h-5" />
              </div>
              <div className="unified-section-header__content">
                <h3 className="unified-section-header__title">Intervention Details</h3>
                <p className="unified-section-header__subtitle">Document what was discussed and addressed during the session</p>
              </div>
            </div>
            <textarea
              value={interventionDetails}
              onChange={(e) => setInterventionDetails(e.target.value)}
              placeholder="Describe what was discussed, taught, or addressed during the counselling session..."
                            rows={4}
              minLength={30}
              maxLength={1000}
              required
            />
            <p className="text-xs mt-1 text-gray-600">
              {interventionDetails.length}/1000 characters (minimum 30)
            </p>
          </div>

          {/* Training & Resources */}
          <div>
            <div className="unified-section-header">
              <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                <BookOpen className="w-5 h-5" />
              </div>
              <div className="unified-section-header__content">
                <h3 className="unified-section-header__title">Training & Resources</h3>
                <p className="unified-section-header__subtitle">Document any training provided and resources shared</p>
              </div>
            </div>
            <div className="grid grid-cols-1 gap-4 sm:gap-6 md:grid-cols-2 mt-4">
              <div>
                <label className="block text-sm font-medium mb-2" >
                  Training Provided
                </label>
                <textarea
                  value={trainingProvided}
                  onChange={(e) => setTrainingProvided(e.target.value)}
                  placeholder="Describe any specific training provided..."
                  rows={3}
                />
              </div>

            <div>
              <label className="block text-sm font-medium mb-2" >
                Resources Provided
              </label>
              <div className="space-y-2">
                {resourcesProvided.map((resource, index) => (
                  <div key={index} className="flex gap-2">
                    <input
                      type="text"
                      value={resource}
                      onChange={(e) => updateResource(index, e.target.value)}
                      placeholder="Resource name or description"
                      className="flex-1 h-11 px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
                    />
                    {resourcesProvided.length > 1 && (
                      <button
                        onClick={() => removeResource(index)}
                        className="p-2 rounded hover:bg-red-50"
                        style={{
                          color: 'var(--color-error)',
                          backgroundColor: 'transparent'
                        }}
                      >
                        <Minus className="w-5 h-5" />
                      </button>
                    )}
                  </div>
                ))}
                <button
                  onClick={addResource}
                  className="text-sm flex items-center gap-1 py-2 px-3 rounded hover:bg-gray-50"
                  style={{
                    color: 'var(--color-primary)',
                    backgroundColor: 'transparent',
                    border: '1px solid var(--color-border)'
                  }}
                >
                  <Plus className="w-4 h-4" />
                  Add Resource
                </button>
              </div>
            </div>
          </div>
          </div>

          {/* Promises to Perform */}
          <div>
            <div className="flex justify-between items-center mb-4">
              <div className="unified-section-header">
                <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                  <CheckCircle className="w-5 h-5" />
                </div>
                <div className="unified-section-header__content">
                  <h3 className="unified-section-header__title">Promises to Perform & Follow-up Schedule</h3>
                  <p className="unified-section-header__subtitle">Employee commitments with target completion and review dates</p>
                </div>
              </div>
              <button
                onClick={addPromise}
                disabled={promisesToPerform.length >= 5}
                className="text-sm flex items-center gap-1 px-4 py-2 rounded"
                style={{
                  color: 'var(--color-primary)',
                  backgroundColor: 'var(--color-background)',
                  border: '1px solid var(--color-border)'
                }}
              >
                <Plus className="w-4 h-4" />
                Add Promise ({promisesToPerform.length}/5)
              </button>
            </div>

            <div className="flex items-start gap-3 p-3 rounded mb-4" style={{ backgroundColor: 'var(--color-info-bg)', border: '1px solid var(--color-primary)' }}>
              <CheckCircle className="w-5 h-5 mt-0.5 flex-shrink-0" style={{ color: 'var(--color-primary)' }} />
              <div className="flex-1">
                <p className="text-sm font-medium" style={{ color: 'var(--color-text)' }}>What are Promises to Perform?</p>
                <p className="text-sm mt-1" style={{ color: 'var(--color-text-secondary)' }}>
                  Specific, measurable commitments the employee makes to improve performance or behavior.
                  Each promise includes <strong>what</strong> will be done and <strong>when</strong> it will be completed and reviewed.
                </p>
              </div>
            </div>

            <div className="space-y-4">
              {promisesToPerform.map((promise, index) => (
                <ThemedPromiseItem
                  key={index}
                  promise={promise}
                  index={index}
                  onUpdate={updatePromise}
                  onRemove={removePromise}
                />
              ))}
            </div>
          </div>

          {/* Employee Comments */}
          <div>
            <div className="unified-section-header">
              <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                <User className="w-5 h-5" />
              </div>
              <div className="unified-section-header__content">
                <h3 className="unified-section-header__title">Employee Comments</h3>
                <p className="unified-section-header__subtitle">Optional feedback or comments from the employee</p>
              </div>
            </div>
            <textarea
              value={employeeComments}
              onChange={(e) => setEmployeeComments(e.target.value)}
              placeholder="Optional comments from the employee..."
              rows={3}
              className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
            />
          </div>
            </div>
          </div>

          {/* Footer */}
          <div className="modal-footer">
            <div className="modal-footer__nav">
              <button
                onClick={onClose}
                className="modal-footer__button modal-footer__button--secondary"
              >
                Cancel
              </button>
              <button
                onClick={() => setStep('manager-sign')}
                disabled={!isFormValid()}
                className="modal-footer__button modal-footer__button--primary"
              >
                Continue to Signatures
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // üé® RENDER MANAGER SIGNATURE STEP
  if (step === 'manager-sign') {
    return (
      <div className="modal-system">
        <div className="modal-container modal-container--lg">
          {/* Header */}
          <div className="modal-header">
            <div className="modal-header__left">
              <button onClick={handleBack} className="modal-header__back-button">
                <ArrowLeft className="w-5 h-5" />
              </button>
              <div>
                <h2 className="modal-header__title">
                  Manager Signature Required
                </h2>
                <p className="modal-header__subtitle">
                  Confirm counselling session with {selectedEmployee?.firstName} {selectedEmployee?.lastName}
                </p>
              </div>
            </div>

            <button onClick={onClose} className="modal-header__close-button">
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Progress indicator */}
          <div className="modal-header__center">
            <div className="modal-header__progress-mobile modal-responsive-hide-mobile">
              <div className="mobile-step-indicator">
                <div className="mobile-step-dots">
                  <div className="mobile-step-dot mobile-step-dot--completed">1</div>
                  <div className="mobile-step-dot mobile-step-dot--active">2</div>
                  <div className="mobile-step-dot">3</div>
                  <div className="mobile-step-dot">4</div>
                </div>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="modal-content">
            <div className="modal-content__scrollable">
              <div className="space-y-4">
                <div className="mb-6 p-4 rounded" style={{ backgroundColor: 'var(--color-card-background)', border: '1px solid var(--color-border)' }}>
                  <div className="unified-section-header">
                    <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                      <UserCheck className="w-5 h-5" />
                    </div>
                    <div className="unified-section-header__content">
                      <h3 className="unified-section-header__title">Manager Confirmation</h3>
                      <p className="unified-section-header__subtitle">Please sign to confirm that you conducted this counselling session with {selectedEmployee?.firstName} {selectedEmployee?.lastName}</p>
                    </div>
                  </div>
                </div>

                <ThemedSignatureCanvas
                  onSignatureChange={handleManagerSignature}
                  label="Manager Signature"
                  required
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // üé® RENDER EMPLOYEE DECISION STEP
  if (step === 'employee-decision') {
    return (
      <div className="modal-system">
        <div className="modal-container modal-container--lg">
          {/* Header */}
          <div className="modal-header">
            <div className="modal-header__left">
              <button onClick={handleBack} className="modal-header__back-button">
                <ArrowLeft className="w-5 h-5" />
              </button>
              <div>
                <h2 className="modal-header__title">
                  Employee Acknowledgment
                </h2>
                <p className="modal-header__subtitle">
                  Optional signature from {selectedEmployee?.firstName} {selectedEmployee?.lastName}
                </p>
              </div>
            </div>

            <button onClick={onClose} className="modal-header__close-button">
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Progress indicator */}
          <div className="modal-header__center">
            <div className="modal-header__progress-mobile modal-responsive-hide-mobile">
              <div className="mobile-step-indicator">
                <div className="mobile-step-dots">
                  <div className="mobile-step-dot mobile-step-dot--completed">1</div>
                  <div className="mobile-step-dot mobile-step-dot--completed">2</div>
                  <div className="mobile-step-dot mobile-step-dot--active">3</div>
                  <div className="mobile-step-dot">4</div>
                </div>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="modal-content">
            <div className="modal-content__scrollable">
              <div className="space-y-4">
                <div className="mb-6 p-4 rounded" style={{ backgroundColor: 'var(--color-card-background)', border: '1px solid var(--color-border)' }}>
                  <div className="unified-section-header">
                    <div className="unified-section-header__icon" style={{ color: 'var(--color-primary)' }}>
                      <UserX className="w-5 h-5" />
                    </div>
                    <div className="unified-section-header__content">
                      <h3 className="unified-section-header__title">Employee Acknowledgment</h3>
                      <p className="unified-section-header__subtitle">Please ask {selectedEmployee?.firstName} {selectedEmployee?.lastName} if they acknowledge this counselling session and would like to provide their signature</p>
                    </div>
                  </div>
                  <div className="mt-4">
                    <div className="flex items-start gap-3 p-3 rounded" style={{ backgroundColor: 'var(--color-info-bg)', border: '1px solid var(--color-primary)' }}>
                      <div className="flex-1">
                        <p className="text-sm" style={{ color: 'var(--color-text-secondary)' }}>
                          <strong>Note:</strong> Employee signature is optional but recommended for documentation purposes.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                {!showEmployeeSignature ? (
                  <div className="space-y-4">
                    <p className="font-medium">
                      Does the employee consent to sign?
                    </p>
                    <div className="flex flex-col sm:flex-row gap-4">
                      <button
                        onClick={() => handleEmployeeDecision(true)}
                        className="flex items-center justify-center gap-2 px-4 py-2 rounded"
                        style={{
                          backgroundColor: 'var(--color-primary)',
                          color: 'var(--color-text-inverse)',
                          border: '1px solid var(--color-primary)'
                        }}
                      >
                        <UserCheck className="w-4 h-4" />
                        Yes, employee will sign
                      </button>
                      <button
                        onClick={() => handleEmployeeDecision(false)}
                        className="flex items-center justify-center gap-2 px-4 py-2 rounded"
                        style={{
                          backgroundColor: 'var(--color-background)',
                          color: 'var(--color-text-secondary)',
                          border: '1px solid var(--color-border)'
                        }}
                      >
                        <UserX className="w-4 h-4" />
                        No, proceed without signature
                      </button>
                    </div>
                  </div>
                ) : (
                  <div>
                    <ThemedSignatureCanvas
                      onSignatureChange={handleEmployeeSignature}
                      label="Employee Signature"
                    />

                    <div className="flex justify-between mt-6">
                      <button
                        onClick={() => setShowEmployeeSignature(false)}
                        className="px-4 py-2 rounded"
                        style={{
                          backgroundColor: 'var(--color-background)',
                          color: 'var(--color-text-secondary)',
                          border: '1px solid var(--color-border)'
                        }}
                      >
                        Back to Decision
                      </button>
                      <button
                        onClick={() => submitCounsellingRecord()}
                        disabled={loading}
                        className="px-4 py-2 rounded"
                        style={{
                          backgroundColor: 'var(--color-secondary)',
                          color: 'var(--color-text-inverse)',
                          border: '1px solid var(--color-secondary)'
                        }}
                      >
                        {loading ? 'Submitting...' : 'Skip Signature & Submit'}
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // üé® RENDER COMPLETION STEP
  if (step === 'complete') {
    return (
      <div className="modal-system">
        <div className="modal-container">
          {/* Header */}
          <div className="modal-header">
            <div className="modal-header__left">
              <div>
                <h2 className="modal-header__title">
                  Counselling Session Recorded
                </h2>
                <p className="modal-header__subtitle">
                  Successfully documented and available for HR review
                </p>
              </div>
            </div>

            <button onClick={onClose} className="modal-header__close-button">
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="modal-content">
            <div className="modal-content__scrollable">
              <div className="space-y-4 text-center p-4 sm:p-6">
                <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full mb-6 bg-green-100">
                  <CheckCircle className="h-8 w-8 text-green-600" />
                </div>

                <h3 className="text-xl font-bold mb-4">
                  Session Successfully Recorded
                </h3>

                <p className="mb-6 text-gray-600">
                  The corrective counselling session with <strong>{selectedEmployee?.firstName} {selectedEmployee?.lastName}</strong> has been
                  successfully documented and will be available to HR for review.
                </p>

                <p className="text-sm text-gray-600">
                  Redirecting automatically in a few seconds...
                </p>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="modal-footer">
            <div className="modal-footer__nav">
              <button
                onClick={onClose}
                className="modal-footer__button modal-footer__button--primary"
              >
                Return to Dashboard
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return null;
};