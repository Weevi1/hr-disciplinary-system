import{L as e,S as t,q as i}from"./business-owner-dashboard-C7pea-oi.js";import"./react-vendor-CWjEGAcE.js";import"./pdf-vendor-tUwojRr6.js";import"./firebase-vendor-BQc9GSQK.js";import"./ui-vendor-DTBvTbg1.js";class r{static{this.ARCHIVE_TO_DELETION_DAYS=1825}static getEmployeeLifecycleState(e){const t={status:e.isActive?"active":"archived",canBeDeleted:!1};if(!e.isActive&&e.archivedAt){t.archivedAt=new Date(e.archivedAt),t.archiveReason=e.archiveReason,t.archivedBy=e.archivedBy;this.getDaysSinceArchived(e.archivedAt)>=this.ARCHIVE_TO_DELETION_DAYS&&(t.status="deletion_eligible",t.deletionEligibleAt=new Date(new Date(e.archivedAt).getTime()+24*this.ARCHIVE_TO_DELETION_DAYS*60*60*1e3),t.canBeDeleted=!0)}return t}static async archiveEmployee(r,a,o){try{const c=await t.getEmployeeById(r,a);if(!c)throw new Error("Employee not found");if(!c.isActive)throw new Error("Employee is already archived");const s={isActive:!1,archivedAt:i.getServerTimestamp(),archiveReason:o.reason,archivedBy:o.archivedBy,updatedAt:i.getServerTimestamp()};await t.updateEmployee(r,a,s),e.success(`✅ [LIFECYCLE] Employee ${r} archived successfully`),o.notifyEmployee}catch(c){throw e.error(`❌ [LIFECYCLE] Failed to archive employee ${r}:`,c),c}}static async restoreEmployee(r,a,o){try{const c=await t.getEmployeeById(r,a);if(!c)throw new Error("Employee not found");if(c.isActive)throw new Error("Employee is already active");const s={isActive:!0,restoredAt:i.getServerTimestamp(),restoredBy:o,updatedAt:i.getServerTimestamp(),archivedAt:null,archiveReason:null,archivedBy:null};await t.updateEmployee(r,a,s),e.success(`✅ [LIFECYCLE] Employee ${r} restored successfully`)}catch(c){throw e.error(`❌ [LIFECYCLE] Failed to restore employee ${r}:`,c),c}}static async getEmployeesEligibleForDeletion(i){try{const e=(await t.queryDocuments(i,"employees",[],{pageSize:1e3,orderField:"archivedAt",orderDirection:"asc"})).documents.filter(e=>{if(e.isActive||!e.archivedAt)return!1;return this.getDaysSinceArchived(e.archivedAt)>=this.ARCHIVE_TO_DELETION_DAYS});return e.length,e}catch(r){throw e.error("❌ [LIFECYCLE] Failed to get deletion-eligible employees:",r),r}}static async permanentlyDeleteEmployee(r,a,o,c){try{e.warn(`🗑️ [LIFECYCLE] PERMANENT DELETION requested for employee: ${r}`);const s=await t.getEmployeeById(r,a);if(!s)throw new Error("Employee not found");if(!this.getEmployeeLifecycleState(s).canBeDeleted){const e=this.ARCHIVE_TO_DELETION_DAYS-this.getDaysSinceArchived(s.archivedAt);throw new Error(`Employee not eligible for deletion. ${e} days remaining in archive period.`)}const l=`DELETE-${s.profile.employeeNumber}-${o.slice(-4).toUpperCase()}`;if(c!==l)throw new Error(`Invalid confirmation code. Expected: ${l}`);const n={action:"PERMANENT_DELETION",employeeId:r,employeeNumber:s.profile.employeeNumber,employeeName:`${s.profile.firstName} ${s.profile.lastName}`,deletedBy:o,deletedAt:i.getServerTimestamp(),archiveDate:s.archivedAt,daysArchived:this.getDaysSinceArchived(s.archivedAt),reason:"Automatic deletion after 5-year archive period"};await t.createDocument(a,"employee_deletion_audit",n),await t.deleteDocument(a,"employees",r),e.warn(`🗑️ [LIFECYCLE] PERMANENT DELETION completed for employee: ${r}`),e.warn(`📋 [LIFECYCLE] Audit record created for deletion of ${s.profile.employeeNumber}`)}catch(s){throw e.error(`❌ [LIFECYCLE] Failed to permanently delete employee ${r}:`,s),s}}static async getLifecycleStats(i){try{const r=await t.queryDocuments(i,"employees",[],{pageSize:2e3,orderField:"createdAt",orderDirection:"asc"}),a={active:0,archived:0,deletionEligible:0,totalArchived:0};let o=null,c=0;for(const e of r.documents)if(e.isActive)a.active++;else if(a.archived++,a.totalArchived++,e.archivedAt){const t=this.getDaysSinceArchived(e.archivedAt);t>=this.ARCHIVE_TO_DELETION_DAYS&&a.deletionEligible++,t>c&&(c=t,o={employeeId:e.id,name:`${e.profile.firstName} ${e.profile.lastName}`,archivedDate:new Date(e.archivedAt),daysArchived:t})}return o&&(a.oldestArchived=o),e.success(`📊 [LIFECYCLE] Stats calculated: ${a.active} active, ${a.archived} archived, ${a.deletionEligible} deletion eligible`),a}catch(r){throw e.error("❌ [LIFECYCLE] Failed to calculate lifecycle stats:",r),r}}static async bulkArchiveEmployees(t,i,r){const a={successful:[],failed:[]};t.length;for(const e of t)try{await this.archiveEmployee(e,i,r),a.successful.push(e)}catch(o){a.failed.push({employeeId:e,error:o instanceof Error?o.message:"Unknown error"})}return e.success(`✅ [LIFECYCLE] Bulk archive complete: ${a.successful.length} successful, ${a.failed.length} failed`),a}static generateDeletionConfirmationCode(e,t){return`DELETE-${e}-${t.slice(-4).toUpperCase()}`}static canArchiveEmployee(e){return e.isActive?e.disciplinaryRecord?.activeWarnings>0?{canArchive:!0,reason:"Employee has active warnings - ensure proper closure before archiving"}:{canArchive:!0}:{canArchive:!1,reason:"Employee is already archived"}}static getDaysSinceArchived(e){const t=new Date(e),i=(new Date).getTime()-t.getTime();return Math.floor(i/864e5)}static getTimeUntilDeletionEligible(e){const t=this.getDaysSinceArchived(e),i=this.ARCHIVE_TO_DELETION_DAYS-t;if(i<=0)return"Eligible for deletion";const r=Math.floor(i/365),a=i%365;return r>0?`${r} year${1!==r?"s":""} and ${a} day${1!==a?"s":""} remaining`:`${a} day${1!==a?"s":""} remaining`}}export{r as EmployeeLifecycleService};
