# .github/workflows/deploy.yml - Production Deployment Pipeline
name: Deploy to Production

on:
  push:
    branches: [ master ]
    paths:
      - 'frontend/**'
      - 'functions/**'
      - 'config/**'
      - 'firebase.json'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: ${{ github.event.inputs.environment == 'staging' && 'hr-system-staging' || 'hr-disciplinary-system' }}

jobs:
  # Pre-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      environment: ${{ steps.validation.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Validate deployment conditions
        id: validation
        run: |
          # Determine environment
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi
          
          # Check if this is a valid deployment commit
          if git log --format="%s" -n 1 | grep -E "(fix|feat|refactor|perf|chore): "; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Valid deployment commit found"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Manual deployment triggered"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Invalid commit message format for deployment"
          fi

  # Run comprehensive tests before deployment
  pre-deployment-tests:
    name: Pre-deployment Tests
    needs: validate-deployment
    if: needs.validate-deployment.outputs.should-deploy == 'true'
    uses: ./.github/workflows/test.yml
    secrets: inherit

  # Build and prepare deployment artifacts
  build-and-prepare:
    name: Build & Prepare Artifacts
    needs: [validate-deployment, pre-deployment-tests]
    runs-on: ubuntu-latest
    if: needs.validate-deployment.outputs.should-deploy == 'true'
    environment: ${{ needs.validate-deployment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Verify Firebase CLI
        run: firebase --version

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline

      - name: Install functions dependencies
        run: |
          cd functions
          npm ci --prefer-offline

      - name: Create environment file
        run: |
          cd frontend
          cat > .env << EOF
          VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
          EOF

      - name: Build frontend
        run: |
          cd frontend
          npm run build
          
          # Verify build output
          ls -la dist/
          du -sh dist/
          
          # Check for critical files
          if [[ ! -f dist/index.html ]]; then
            echo "‚ùå Build failed: index.html not found"
            exit 1
          fi

      - name: Build functions
        run: |
          cd functions
          npm run build
          
          # Verify functions build
          ls -la lib/
          du -sh lib/

      - name: Run security audit
        run: |
          cd frontend
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Security audit found issues"
          cd ../functions
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Security audit found issues"

      - name: Bundle size analysis
        run: |
          cd frontend/dist
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
          
          for file in assets/*.js; do
            if [[ -f "$file" ]]; then
              size=$(du -h "$file" | cut -f1)
              gzipped=$(gzip -c "$file" | wc -c | numfmt --to=iec-i --suffix=B)
              echo "| $(basename "$file") | $size | $gzipped |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            frontend/dist/
            functions/lib/
          retention-days: 30

  # Deploy to Firebase
  deploy-to-firebase:
    name: Deploy to Firebase
    needs: [validate-deployment, build-and-prepare]
    runs-on: ubuntu-latest
    environment: ${{ needs.validate-deployment.outputs.environment }}
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Verify artifacts
        run: |
          echo "Frontend dist contents:"
          ls -la frontend/dist/ || echo "No frontend dist found"
          echo "Functions lib contents:"  
          ls -la functions/lib/ || echo "No functions lib found"

      - name: Deploy to Firebase
        run: |
          # Set Firebase project
          firebase use ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
          
          # Deploy all services
          firebase deploy --only hosting,functions,firestore:rules,storage:rules --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Verify deployment
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Environment: ${{ needs.validate-deployment.outputs.environment }}"
          echo "Project: ${{ env.FIREBASE_PROJECT_ID }}"
          
          if [[ "${{ needs.validate-deployment.outputs.environment }}" == "production" ]]; then
            echo "Production URL: https://hr-disciplinary-system.web.app"
          else
            echo "Staging URL: https://hr-system-staging.web.app"
          fi

  # Post-deployment verification
  post-deployment-verification:
    name: Post-deployment Verification
    needs: [validate-deployment, deploy-to-firebase]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Health check
        run: |
          # Determine URL based on environment
          if [[ "${{ needs.validate-deployment.outputs.environment }}" == "staging" ]]; then
            URL="https://hr-system-staging.web.app"
          else
            URL="https://hr-disciplinary-system.web.app"
          fi
          
          echo "Performing health check on: $URL"
          
          # Check if site is accessible
          if curl -f -s "$URL" > /dev/null; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ùå Site is not accessible"
            exit 1
          fi
          
          # Check critical resources
          if curl -f -s "$URL/assets/" > /dev/null; then
            echo "‚úÖ Assets are loading"
          else
            echo "‚ö†Ô∏è Assets may not be loading properly"
          fi

      - name: Run smoke tests
        run: |
          cd frontend
          # Run basic smoke tests to verify deployment
          npm test -- --testNamePattern="smoke" --passWithNoTests
        env:
          CI: true
          BASE_URL: ${{ needs.validate-deployment.outputs.environment == 'staging' && 'https://hr-system-staging.web.app' || 'https://hr-disciplinary-system.web.app' }}

      - name: Performance check with Lighthouse CI
        if: needs.validate-deployment.outputs.environment == 'production'
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deployment notification
  notify-deployment:
    name: Notify Deployment Status
    needs: [validate-deployment, deploy-to-firebase, post-deployment-verification]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment success notification
        if: needs.deploy-to-firebase.result == 'success' && needs.post-deployment-verification.result == 'success'
        run: |
          echo "## ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.validate-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-deployment.outputs.environment }}" == "production" ]]; then
            echo "**URL:** https://hr-disciplinary-system.web.app" >> $GITHUB_STEP_SUMMARY
          else
            echo "**URL:** https://hr-system-staging.web.app" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Deployment failure notification
        if: needs.deploy-to-firebase.result == 'failure' || needs.post-deployment-verification.result == 'failure'
        run: |
          echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.validate-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Failed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the deployment logs and retry if necessary." >> $GITHUB_STEP_SUMMARY
          
          exit 1