# .github/workflows/dependency-updates.yml - Automated dependency management
name: Dependency Updates

on:
  schedule:
    # Weekly dependency check on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - security-only
      auto_merge:
        description: 'Auto-merge if tests pass'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      update-type: ${{ steps.check.outputs.update-type }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for updates
        id: check
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
          echo "update-type=${UPDATE_TYPE}" >> $GITHUB_OUTPUT
          
          echo "🔍 Checking for dependency updates..."
          
          # Check frontend dependencies
          cd frontend
          FRONTEND_UPDATES=$(npm outdated --json 2>/dev/null | jq -r 'keys[]' | wc -l)
          
          # Check functions dependencies
          cd ../functions
          FUNCTIONS_UPDATES=$(npm outdated --json 2>/dev/null | jq -r 'keys[]' | wc -l)
          
          TOTAL_UPDATES=$((FRONTEND_UPDATES + FUNCTIONS_UPDATES))
          
          echo "Frontend updates available: ${FRONTEND_UPDATES}"
          echo "Functions updates available: ${FUNCTIONS_UPDATES}"
          echo "Total updates available: ${TOTAL_UPDATES}"
          
          if [ "$TOTAL_UPDATES" -gt 0 ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has-updates == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../functions && npm ci

      - name: Audit and fix security issues
        run: |
          echo "🔐 Running security audit and auto-fix..."
          
          # Frontend security fixes
          cd frontend
          npm audit --audit-level=moderate
          npm audit fix --force || echo "⚠️ Some frontend security issues could not be auto-fixed"
          
          # Functions security fixes
          cd ../functions
          npm audit --audit-level=moderate  
          npm audit fix --force || echo "⚠️ Some functions security issues could not be auto-fixed"

      - name: Test after security fixes
        run: |
          echo "🧪 Testing after security fixes..."
          
          # Test frontend build
          cd frontend
          npm run build || { echo "❌ Frontend build failed after security fixes"; exit 1; }
          
          # Test functions build
          cd ../functions
          npm run build || { echo "❌ Functions build failed after security fixes"; exit 1; }

      - name: Commit security fixes
        run: |
          git config user.name "dependabot[bot]"
          git config user.email "49699333+dependabot[bot]@users.noreply.github.com"
          
          if [[ $(git diff --stat) != '' ]]; then
            git add .
            git commit -m "fix(security): automated security vulnerability fixes
            
            - Updated vulnerable dependencies
            - Fixed security issues found by npm audit
            - Verified build process after updates"
            
            echo "✅ Security fixes committed"
            echo "SECURITY_FIXES=true" >> $GITHUB_ENV
          else
            echo "✅ No security fixes needed"
            echo "SECURITY_FIXES=false" >> $GITHUB_ENV
          fi

  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    needs: [check-dependencies, security-updates]
    if: needs.check-dependencies.outputs.has-updates == 'true' && needs.check-dependencies.outputs.update-type != 'security-only'
    
    strategy:
      matrix:
        component: [frontend, functions]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create update branch
        run: |
          BRANCH_NAME="dependencies/${{ matrix.component }}-updates-$(date +%Y%m%d)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Install current dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci

      - name: Update dependencies
        run: |
          cd ${{ matrix.component }}
          UPDATE_TYPE="${{ needs.check-dependencies.outputs.update-type }}"
          
          echo "📦 Updating ${{ matrix.component }} dependencies (${UPDATE_TYPE})..."
          
          case "$UPDATE_TYPE" in
            "patch")
              npm update --save
              ;;
            "minor")
              # Update to latest minor versions
              npm update --save
              # Also update devDependencies
              npm update --save-dev
              ;;
            "major")
              # Use npm-check-updates for major version updates
              npx npm-check-updates -u
              npm install
              ;;
            *)
              npm update --save
              ;;
          esac

      - name: Check for changes
        id: changes
        run: |
          if [[ $(git diff --stat) != '' ]]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          cd ${{ matrix.component }}
          
          echo "🧪 Running tests for ${{ matrix.component }}..."
          
          # Build to verify everything works
          npm run build
          
          # Run tests if available
          if grep -q '"test"' package.json; then
            npm test
          fi

      - name: Generate change summary
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          cd ${{ matrix.component }}
          
          echo "## ${{ matrix.component }} Dependency Updates" > ../CHANGES_${{ matrix.component }}.md
          echo "" >> ../CHANGES_${{ matrix.component }}.md
          
          # Get list of changed packages
          if [[ -f package-lock.json ]]; then
            # Compare package-lock.json to see what actually changed
            git diff HEAD~1 package.json | grep -E '^[+-]' | grep -v '@@' >> ../CHANGES_${{ matrix.component }}.md || echo "No package.json changes" >> ../CHANGES_${{ matrix.component }}.md
          fi
          
          echo "" >> ../CHANGES_${{ matrix.component }}.md
          echo "### Updated packages:" >> ../CHANGES_${{ matrix.component }}.md
          npm outdated --json 2>/dev/null | jq -r 'to_entries[] | "- \(.key): \(.value.current) → \(.value.wanted)"' >> ../CHANGES_${{ matrix.component }}.md || echo "No outdated packages" >> ../CHANGES_${{ matrix.component }}.md

      - name: Commit changes
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          git config user.name "dependabot[bot]"
          git config user.email "49699333+dependabot[bot]@users.noreply.github.com"
          
          git add .
          git commit -m "chore(${{ matrix.component }}): update dependencies
          
          - Updated ${{ matrix.component }} dependencies (${{ needs.check-dependencies.outputs.update-type }} updates)
          - All tests passing after updates
          - Build verification completed
          
          Automated update by dependency management workflow"

      - name: Push changes
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          git push origin "$BRANCH_NAME"
          echo "✅ Changes pushed to branch: $BRANCH_NAME"

      - name: Upload change summary
        if: steps.changes.outputs.has-changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-changes-${{ matrix.component }}
          path: CHANGES_${{ matrix.component }}.md

  create-pull-request:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs: [check-dependencies, dependency-updates]
    if: always() && needs.dependency-updates.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download change summaries
        uses: actions/download-artifact@v4
        with:
          path: changes

      - name: Create consolidated PR
        run: |
          # Find all dependency update branches
          BRANCHES=$(git branch -r | grep "dependencies/" | grep "$(date +%Y%m%d)" | head -5)
          
          if [[ -n "$BRANCHES" ]]; then
            # Create main dependency update branch
            MAIN_BRANCH="dependencies/automated-updates-$(date +%Y%m%d)"
            git checkout -b "$MAIN_BRANCH"
            
            # Merge all dependency update branches
            for branch in $BRANCHES; do
              CLEAN_BRANCH=$(echo "$branch" | sed 's/origin\///')
              git merge "origin/$CLEAN_BRANCH" --no-edit || echo "⚠️ Merge conflict in $CLEAN_BRANCH"
            done
            
            # Create comprehensive commit message
            cat > PR_BODY.md << EOF
          ## 📦 Automated Dependency Updates
          
          This PR contains automated dependency updates for the HR Disciplinary System.
          
          ### Changes
          - **Type**: ${{ needs.check-dependencies.outputs.update-type }} updates
          - **Components**: frontend, functions
          - **Security fixes**: Included
          
          ### Verification
          - ✅ All builds passing
          - ✅ Security audit completed
          - ✅ Tests verified
          
          ### Files Changed
          $(find changes -name "*.md" -exec cat {} \; 2>/dev/null || echo "Change summaries not available")
          
          ---
          
          **Automated PR created by dependency management workflow**  
          **Review and merge after manual testing if needed**
          EOF
            
            git push origin "$MAIN_BRANCH"
            echo "✅ Consolidated branch created: $MAIN_BRANCH"
          else
            echo "ℹ️ No dependency update branches found"
          fi

      - name: Auto-merge if requested
        if: github.event.inputs.auto_merge == 'true'
        run: |
          echo "🤖 Auto-merge requested, but requires manual implementation"
          echo "This would typically use GitHub CLI or API to create and merge PR"
          # gh pr create --title "chore: automated dependency updates" --body-file PR_BODY.md
          # gh pr merge --auto --squash

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [dependency-updates, create-pull-request]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clean up temporary branches
        run: |
          echo "🧹 Cleaning up temporary dependency branches..."
          
          # Delete old dependency branches (older than 7 days)
          OLD_BRANCHES=$(git branch -r | grep "dependencies/" | grep -v "$(date +%Y%m%d)" | head -10)
          
          for branch in $OLD_BRANCHES; do
            CLEAN_BRANCH=$(echo "$branch" | sed 's/origin\///')
            # In real scenario, would check if branch is merged before deleting
            echo "Would delete old branch: $CLEAN_BRANCH"
          done

  summary:
    name: Update Summary
    runs-on: ubuntu-latest
    needs: [check-dependencies, security-updates, dependency-updates, create-pull-request]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 📦 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Update Type:** ${{ needs.check-dependencies.outputs.update-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Has Updates:** ${{ needs.check-dependencies.outputs.has-updates }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.security-updates.result }}" == "success" ]]; then
            echo "- ✅ Security updates completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security-updates.result }}" == "failure" ]]; then
            echo "- ❌ Security updates failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ Security updates skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.dependency-updates.result }}" == "success" ]]; then
            echo "- ✅ Dependency updates completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.dependency-updates.result }}" == "failure" ]]; then
            echo "- ❌ Dependency updates failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ Dependency updates skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.create-pull-request.result }}" == "success" ]]; then
            echo "- ✅ Pull request created" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.create-pull-request.result }}" == "failure" ]]; then
            echo "- ❌ Pull request creation failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ Pull request creation skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next scheduled check:** Next Monday at 6:00 AM UTC" >> $GITHUB_STEP_SUMMARY